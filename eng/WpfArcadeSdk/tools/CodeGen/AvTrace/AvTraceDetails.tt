<#@ template hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="Newtonsoft.Json" #>
<#@ assembly name="Microsoft.CSharp" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ output extension=".cs" #>
<#@ parameter type="System.String" name="AvTraceMessageFile" #>

// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.
using System;
using System.Diagnostics;

namespace MS.Internal
{
<# 
   string fileName = this.Host.ResolvePath(AvTraceMessageFile);
   string jsonText = File.ReadAllText(fileName);
   dynamic jsonObj = JsonConvert.DeserializeObject(jsonText);
   foreach (var source in jsonObj.sources)
   {
		string name = source.name; 
#>
    static internal partial class Trace<#=name#>
    {
        static private AvTrace _avTrace = new AvTrace(
                delegate() { return PresentationTraceSources.<#=name#>Source; },
                delegate() { PresentationTraceSources._<#=name#>Source = null; }
                );

<#
		int id = 0;
		foreach (var traceDetails in source.trace_details)
		{
			++id;
			string traceName = traceDetails.name;
#>
		static AvTraceDetails _<#=traceName#>;
		static public AvTraceDetails <#=traceName#>
        {
            get
            {
                if ( _<#=traceName#> == null )
                {
<#			string dataString = traceDetails.data.ToString().Trim('[',']').Replace(Environment.NewLine,""); #>
                    _<#=traceName#> = new AvTraceDetails(<#=id#>, new string[] { "<#=traceDetails.message #>", <#=dataString#> } );
                }

                return _<#=traceName#>;
            }
        }
<#		} #>
	}
<# } #>
}